This is the description of the application. This is everything you need 
and how I expect the application to be like.

This application is a competitive programming site that allows for users to 
solve competitive programming problems from an available list. 
the website will feature a frontend in react, which i will host 
on vercel, and then a backend in nodejs, which i will host on render.
So, you will hav to create a frontend and backend directory. 

For the time being, i want to test the application locally on my computer, 
so i will be starting two servers; one for the frontend, and one for the backend.

The frontend is structured as following:
First, the user will be prompted to login if they are not already.
The user authentication will be managed by supabase. give me the instructions
and commands on how to setup the supabase project from my end to be able to
store user data and information for authentication.

After logging in, the user will at the home page of the website, which will be 
containing a blank homepage with nothing but "welcome to WMOJ". The other pages
they can visit by clicking the buttons at the navigation bar (besides the "home")
at the top will be "problems", which will contain a (currently blank) list of problems.

Then, there is to be another secret page (which is not going to have a button 
linking to it on the regular homepage), called "admin". this is where 
the administration console is for the website (in the future there will be
verification required for those who have administrator privileges). This page
will be where problems can be created.


Afterwards, from the admin page, the admin will be able to add new problems
to the website. The name and problem description (the contents of the problem
itself) are required. and then they are also stored in the supabase. also, the 
problem test cases are required to be inputted (allowing the admin to list them one by one
and creating it each manually, by  

The application will allow users who are logged in to try problems, and 
submit their code solution to the problem to a backend endpoint called "judge".

The judge backend endpoint will run the code (which is in python), use the 
test case information to give the code the required input, and then the judge
will look at the expected output (which is also included in the test case data
stored in supabase which is determined by the admin when they created the problem)
and then compare the output of the user's code against each test case to determine
whether it passed or not each test case. each test case (which was submitted by
the admin when creating the problem) contains multiple sets of inputs, and expected
outputs. by comparing the actual output to the expected outputs, it will be determined
whether or not the user's code passed a certain test case. and finally, after 
running it against all the test cases, the backend judge endpoint will return 
a score that says how many test cases passed out of the total number. 
On the page where the problem is, the user has the ability to click a submit button 
and upload a python file containing their code. 
once they submit it, and after the judge runs it against all the test cases,
the page will be updated with the user's score on that problem.


give me the instructions and commands on how to setup the 
supabase project from my end to be able to implement all the 
features of the application properly. 